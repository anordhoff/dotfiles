# --------------------------------------
# general
# --------------------------------------

# start tmux on launch, attaching to an existing (or creating a new) session
if [ -z $TMUX ]; then
  tmux attach || tmux new-session -A -s default
fi

# options
setopt   prompt_subst # enable prompt substitution
setopt   dotglob      # include hidden files in expansion and completion
setopt   extendedglob # treat '#', '~', and '^' as part of patterns
setopt   nomatch      # print an error if no filename matches pattern
unsetopt flowcontrol  # disable suspending terminal with ctrl-s

# directory stack options
setopt autopushd       # make cd push the old directory onto the dir stack
setopt pushdignoredups # do not push copies of the same dir onto the dir stack
setopt pushdsilent     # do not print the dir stack after pushd or popd

# disable beeping
unsetopt beep
unsetopt histbeep
unsetopt listbeep

# print the current git branch
function gitbranch() {
  branch=$(git symbolic-ref --short -q HEAD 2>/dev/null)
  if [[ $branch != "" ]]; then
    if [[ ${#branch} -gt 25 ]]; then
      echo " (${branch:0:22}...)"
    else
      echo " (${branch})"
    fi
  fi
}

function awsprofile() {
  if [ -v AWS_PROFILE ]; then
    # remove unnecessary, work specific prefix
    echo " (${AWS_PROFILE:14})"
  fi
}

# print current working directory, git branch, AWS profile, and exit code in the prompt
PS1='%F{blue}%60<...<%~%F{default}$(gitbranch)$(awsprofile)%(?.. [%?%\]) $ '

# use emacs mode for zle
bindkey -e

# bash-like navigation
autoload -Uz select-word-style
select-word-style bash

# delete key
bindkey "^[[3~" delete-char

# delete the line before the cursor, rather than entire line (like bash)
bindkey '^U' backward-kill-line

# delete the word behind cursor up to the next whitespace (like bash)
zle -N backward-kill-space-word backward-kill-word-match
zstyle :zle:backward-kill-space-word word-style whitespace
bindkey '^W' backward-kill-space-word

# ctrl-x_ctrl-e opens the current command in the editor (like bash)
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line

# use 'run-help' command for zsh built-ins
autoload -Uz run-help

# lazyload functions
typeset -U fpath
fpath=(~/dotfiles/zsh/functions $fpath) && autoload ${fpath[1]}/*(:t)


# --------------------------------------
# history
# --------------------------------------

HISTFILE=~/.zhistory
HISTSIZE=1000000
SAVEHIST=1000000

setopt extendedhistory  # save start time and length of time commands run
setopt histfindnodups   # skip duplicates when using reverse history search
setopt histignorespace  # commands that start with a space are not written
setopt histignoredups   # ignore consecutive duplicates
setopt histreduceblanks # remove excess spaces before writing a command
setopt incappendhistory # update the history file after each executed command

# match typed command and arguments when moving through history
autoload -Uz up-line-or-beginning-search
autoload -Uz down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey '^[[A' up-line-or-beginning-search
bindkey '^[[B' down-line-or-beginning-search
bindkey '^P' up-line-or-beginning-search
bindkey '^N' down-line-or-beginning-search

# allow patterns in reverse history search
bindkey '^R' history-incremental-pattern-search-backward
bindkey '^S' history-incremental-pattern-search-forward

# undo changes to the line from history
revert-line() {                          
  while zle .undo; do done
}
zle -N revert-line 
bindkey '^[r' revert-line 

# highlight reverse history search matches
zle_highlight=(isearch:fg=black,bg=white)


# --------------------------------------
# completion
# --------------------------------------

# TODO: touch hello-app.yaml; touch hello-app-service.yaml; kubectl apply -f
# helo<tab>   should result in 'hello-app', rather than resulting in 'hell' and
# selecting first option in menu

setopt   alwaystoend    # completion in a word will move cursor to end of word
setopt   completeinword # completion takes place at the cursor position in word
unsetopt listtypes      # don't show filetypes in completion menu

# load the completion module
autoload -Uz compinit
zmodload zsh/complist

# automatically load bash completion functions
autoload -U +X bashcompinit && bashcompinit

# add completion directory to fpath
fpath=(~/dotfiles/zsh/completions $fpath)

# add completion for brew packages
if [[ $OSTYPE =~ "darwin"* ]]; then
  fpath=($HOMEBREW_PREFIX/share/zsh/site-functions $fpath)
fi

# run compinit if ~/jobfiles/zsh does not exist
if [ ! -d ~/jobfiles/zsh ]; then
  compinit
fi

# go backwards in completion menu using shift-tab
bindkey -M menuselect '^[[Z' reverse-menu-complete

# allow one error
zstyle ':completion:*' max-errors 1

# smart case completion; complete partial words
zstyle ':completion:*:complete-extended:*' \
  matcher-list 'm:{a-z-_}={A-Z_-}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

bindkey "^Xb" _alias_expand_line

# complete *. with extensions; standard; one error; case insensitive completion
zstyle ':completion:*' completer \
  _expand_alias _extensions _complete _approximate _complete:-extended

# cache completions
zstyle ':completion:*' use-cache true
zstyle ':completion:*' cache-path ~/.zcompcache

# use a completion menu
zstyle ':completion:*' menu select

# show help and warning messages
zstyle ':completion:*:messages' format '-- %d --'
zstyle ':completion:*:warnings' format '-- no matches found --'

# use colors in completion menu (LS_COLORS is only exported on linux)
export LS_COLORS='rs=0:di=01;32:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;37;41:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.7z=01;31:*.ace=01;31:*.alz=01;31:*.apk=01;31:*.arc=01;31:*.arj=01;31:*.bz=01;31:*.bz2=01;31:*.cab=01;31:*.cpio=01;31:*.crate=01;31:*.deb=01;31:*.drpm=01;31:*.dwm=01;31:*.dz=01;31:*.ear=01;31:*.egg=01;31:*.esd=01;31:*.gz=01;31:*.jar=01;31:*.lha=01;31:*.lrz=01;31:*.lz=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.lzo=01;31:*.pyz=01;31:*.rar=01;31:*.rpm=01;31:*.rz=01;31:*.sar=01;31:*.swm=01;31:*.t7z=01;31:*.tar=01;31:*.taz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tgz=01;31:*.tlz=01;31:*.txz=01;31:*.tz=01;31:*.tzo=01;31:*.tzst=01;31:*.udeb=01;31:*.war=01;31:*.whl=01;31:*.wim=01;31:*.xz=01;31:*.z=01;31:*.zip=01;31:*.zoo=01;31:*.zst=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.m4a=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.oga=01;36:*.opus=01;36:*.spx=01;36:*.xspf=01;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:'
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# enable improved git-completion (required by completions/_git)
zstyle ':completion:*:*:git:*' script ~/dotfiles/zsh/extensions/git-completion.bash


# --------------------------------------
# alias
# --------------------------------------

# unalias default run-help alias to man; alias help to run-help (for builtins)
if (( ${+aliases[run-help]} )); then
  unalias run-help
fi
alias help=run-help

# refresh watch every second; work with aliases
alias watch='watch -n 1 '

# disable colors in tldr
alias tldr='NO_COLOR=true tldr'

# open the notebook dir
alias notes='nvim ~/notebook/inbox.md -c "cd ~/notebook"'
alias todo='nvim ~/notebook/todo.md -c "cd ~/notebook"'

# directory stack
alias dirs='dirs -v'
for i in {0..9}; do
  alias d${i}="cd +${i}"
done

# disable colors in github cli
alias gh='NO_COLOR=true gh'

# enabled colors in grep
alias grep='grep --color=auto'

# use gnu ls on bsd (bsd ls does not have --group-directories-first)
if [[ $OSTYPE =~ "darwin"* ]]; then
  alias l='gls -lhA --color=auto --group-directories-first'
  alias ll='gls -lh --color=auto --group-directories-first'
  alias ls='gls --color=auto --group-directories-first'
else
  alias l='ls -lhA --color=auto --group-directories-first'
  alias ll='ls -lh --color=auto --group-directories-first'
  alias ls='ls --color=auto --group-directories-first'
fi

# python3
if [[ $OSTYPE =~ "darwin"* ]]; then
  alias python="$HOMEBREW_PREFIX/bin/python3"
  alias pip="$HOMEBREW_PREFIX/bin/pip3"
fi

# git
alias g='git'

# kubernetes
alias  k='kubectl'
alias kd='kubectl describe'
alias ke='kubectl events --for'
alias kg='kubectl get'

# krew plugins
alias kctx='kubectl ctx'
alias  kns='kubectl ns'
alias   kl='kubectl stern'


# --------------------------------------
# extensions
# --------------------------------------

# enable expand-multiple-dots.zsh
if [ -r ~/dotfiles/zsh/extensions/expand-multiple-dots.zsh ]; then
  source ~/dotfiles/zsh/extensions/expand-multiple-dots.zsh
fi

# enable expand-or-complete-or-list-files.zsh
if [ -r ~/dotfiles/zsh/extensions/expand-or-complete-or-list-files.zsh ]; then
  source ~/dotfiles/zsh/extensions/expand-or-complete-or-list-files.zsh
fi

# enable fzf shell integration
if command -v fzf &>/dev/null; then
  # prevent "can't change option: zle" errors in neovim when running shell commands
  source <(fzf --zsh) 2>/dev/null
fi


# --------------------------------------
# misc
# --------------------------------------

# source work zshrc
if [ -r ~/jobfiles/zsh/zshrc ]; then
  source ~/jobfiles/zsh/zshrc
fi
