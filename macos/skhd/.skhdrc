# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# open terminal
cmd - return : /Applications/kitty.app/Contents/MacOS/kitty

# toggle window zoom
ctrl + cmd - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
ctrl + cmd - s : yabai -m window --toggle split

# balance size of windows
ctrl + cmd - r : yabai -m space --balance

# focus window
cmd - n : yabai -m window --focus west
cmd - e : yabai -m window --focus south
cmd - i : yabai -m window --focus north
cmd - o : yabai -m window --focus east

# swap managed window
ctrl + cmd - n : yabai -m window --swap west
ctrl + cmd - e : yabai -m window --swap south
ctrl + cmd - i : yabai -m window --swap north
ctrl + cmd - o : yabai -m window --swap east

# change window size
alt + cmd - n : yabai -m window --resize left:100:0; yabai -m window --resize right:-100:0 # shrink width
alt + cmd - e : yabai -m window --resize top:0:-100; yabai -m window --resize bottom:0:100 # grow height
alt + cmd - i : yabai -m window --resize top:0:100; yabai -m window --resize bottom:0:-100 # shrink height
alt + cmd - o : yabai -m window --resize left:-100:0; yabai -m window --resize right:100:0 # grow width

# move window to adjacent space
ctrl + cmd - a : yabai -m window --space prev
ctrl + cmd - t : yabai -m window --space next

# move window to specific space
ctrl + cmd - 1 : yabai -m window --space 1
ctrl + cmd - 2 : yabai -m window --space 2
ctrl + cmd - 3 : yabai -m window --space 3
ctrl + cmd - 4 : yabai -m window --space 4
ctrl + cmd - 5 : yabai -m window --space 5
ctrl + cmd - 6 : yabai -m window --space 6
ctrl + cmd - 7 : yabai -m window --space 7
ctrl + cmd - 8 : yabai -m window --space 8
ctrl + cmd - 9 : yabai -m window --space 9
ctrl + cmd - 0 : yabai -m window --space 0
